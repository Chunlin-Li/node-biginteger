var pedding = require('pedding');
var should = require('should');
var BigInteger = require('../lib/BigInteger');
var Long = require('long');

describe('BigInteger', function () {

  it('#fromString()', function (done) {
    var n = BigInteger.fromString('-1649a75c212838e75e09a31f95885cc4', 16);
    n.toBuffer().toString('hex').should.eql(new Buffer([-23, -74, 88, -93, -34, -41, -57, 24, -95, -10, 92, -32, 106, 119, -93, 60]).toString('hex'));
    done();
  });

  it('#fromBuffer()', function (done) {
    var n = BigInteger.fromBuffer(1, new Buffer('hello1234'));
    n.toString(10).should.eql('1925769719185931383604');
    done();
  });

  it('#fromLong()', function (done) {
    var mag = [1073741824, 0];
    var n = BigInteger.fromLong(Long.fromString('4000000000000000', 16));
    n.mag[0].should.eql(mag[0]);
    n.mag[1].should.eql(mag[1]);

    mag = [943559024, -1201670133];
    n = BigInteger.fromLong(Long.fromString('383d9170b85ff80b', 16));
    n.mag[0].should.eql(mag[0]);
    n.mag[1].should.eql(mag[1]);
    done();
  });

  it('#bitLength() x', function (done) {

    done();
  });

  it('#abs() x', function (done) {

    done();
  });

  it('#negate() x', function (done) {

    done();
  }); 

  it('#toString()', function (done) {
    var n = BigInteger.fromString('-1649a75c212838e75e09a31f95885cc4', 16);
    n.toString().should.eql('-29625448039597583839432359987556932804');
      
    var n = BigInteger.fromMag([246752, -1590483493, 1026437694, -1650966168, 1302453669, -2061979589, -1322696806, -1021457984, -929746066, -235164568, -2018752966, -836472077, -979803355, -1357116076, 1860959356, 772980992], 1);
    n.toString().should.eql('770299664011129139433679167424561096649974571934768846338049791388830494291999678886952832217429827452869220180212280123272521504180623355525727437056');
    done();
  });

  it('#add()', function (done) {
    var n = BigInteger.fromString('-1649a75c212838e75e09a31f95885cc4', 16);
    var n1 = n.add(n);
    n1.toString().should.eql('-59250896079195167678864719975113865608');
    
    var n2 = n.add(BigInteger.fromString('1649a75c212838e75e09a31f95885cc4', 16));
    n2.toString().should.eql('0');

    var n3 = n.add(BigInteger.fromString('1649a75c21', 16));
    n3.toString().should.eql('-29625448039597583839432359891831947427');

    var n4 = n3.add(BigInteger.fromBuffer(1, new Buffer('hello1234')));
    n4.toString(10).should.eql('-29625448039597581913662640705900563823');

    done();
  });

  it('#subtract()', function (done) {

    var n = BigInteger.fromString('-1649a75c212838e75e09a31f95885cc4', 16);
    var n1 = n.subtract(n);
    n1.toString().should.eql('0');

    var n2 = n.subtract(BigInteger.fromString('1649a75c212838e75e09a31f95885cc4', 16));
    n2.toString().should.eql('-59250896079195167678864719975113865608');

    var n4 = BigInteger.fromBuffer(-1, new Buffer('hello1234')).subtract(n);
    n4.toString(10).should.eql('29625448039597581913662640801625549200');

    done();

  });

  it('#multiply()', function (done) {
    var n = BigInteger.fromString('4', 10);
    var n1 = n.multiply(BigInteger.fromString('4', 10));
    n1.toString().should.eql('16');

    var n = BigInteger.fromString('1649a75c212838e75e09a31f95885cc4', 16);
    var n1 = n.multiply(BigInteger.fromBuffer(1, new Buffer('hello1234')));
    n1.toString().should.eql('57051790751973240447433385155385407248918430815970175345616');    

    done();
  });

  it('#and()', function (done) {

    var n = BigInteger.fromString('1649a75c212838e75e09a31f95885cc4', 16);
    var n1 = n.and(BigInteger.fromBuffer(1, new Buffer('hello1234')));
    n1.toString().should.eql('1775789634519591555076'); 
      
    done();

  });

  it('#squareToLen()', function (done) {

    var z = BigInteger.squareToLen([373925724, 556284135, 1577689887, -1786225468], 4, null);
    JSON.stringify(z).should.eql(JSON.stringify([32554484, -1247336670, -1953533566, 447288530, 680235003, 468127167, -1438116842, -639797744]));
    
    var z = BigInteger.squareToLen([32554484, -1247336670, -1953533566, 447288530, 680235003, 468127167, -1438116842, -639797744],8,null);
    var rs = [246752, -1590483493, 1026437694, -1650966168, 1302453669, -2061979589, -1322696806, -1021457984, -929746066, -235164568, -2018752966, -836472077, -979803355, -1357116076, 1860959356, 772980992];
    z.length.should.eql(rs.length);
    z.forEach(function (x, i) {
      x.should.eql(rs[i]);
    });
    
    done();
  });

  it('#pow()', function (done) {

    var n = BigInteger.fromString('2', 10);
    var n1 = n.pow(2);
    n1.toString().should.eql('4'); 

    var n = BigInteger.fromString('1649a75c212838e75e09a31f95885cc4', 16);
    var n1 = n.pow(4);
    n1.toString().should.eql('770299664011129139433679167424561096649974571934768846338049791388830494291999678886952832217429827452869220180212280123272521504180623355525727437056'); 
      
    done();

  });

  it('#shiftRight()', function (done) {

    var n = BigInteger.fromString('1649a75c212838e75e09a31f95885cc4', 16);
    var n1 = n.shiftRight(32);
    n1.toString().should.eql('6897712135593775622414508831'); 
    
    done();

  });

  it('#shiftLeft()', function (done) {

    var n = BigInteger.fromString('1649a75c212838e75e09a31f95885cc4', 16);
    var n1 = n.shiftLeft(32);
    n1.toString().should.eql('127240330459418935590980101350655993331249577984'); 
    
    done();

  });
  
  it('#equals()', function (done) {

    var n = BigInteger.fromString('1649a75c212838e75e09a31f95885cc4', 16);
    n.equals(n).should.be.true;

    var n2 = BigInteger.fromString('abc', 16);
    n.equals(n2).should.be.false;

    done();
  });

  it('#mod()', function (done) {

    var n = BigInteger.fromString('1649a75c212838e75e09a31f95885cc4', 16);
    var n1 = n.mod(n);
    n1.toString().should.eql('0');

    var n = BigInteger.fromString('1649a75c212838e75e09a31f95885cc4', 16);
    var n1 = n.mod(BigInteger.fromString('abc', 16));
    n1.toString().should.eql('876');

    done();
  });

  it('#montReduce()', function (done) {

    var b = [ 0, 2, -318705130, 1861126921 ];
    var mod = [ 2, -1356139857 ];
    var modLen = 2;
    var inv = 208184004;

    var rs = BigInteger.montReduce(b, mod, modLen, inv);
    JSON.stringify(rs).should.eql(JSON.stringify([1, -275680574, -1193753352, -316060955]));
    // [ 1, 1574182409, 0, 0 ]
    done();

  });

  it('#oddModPow()', function (done) {

    var y = BigInteger.fromMag([16], 1);
    var z = BigInteger.fromMag([687], 1);

    var test = BigInteger.fromMag([189], 1);

    var rs = test.oddModPow(y, z);
    JSON.stringify(rs.mag).should.eql(JSON.stringify([378]));


    var y = BigInteger.fromMag([16], 1);
    var z = BigInteger.fromMag([2, -1356139857], 1);

    var test = BigInteger.fromMag([2, 332369740], 1);

    var rs = test.oddModPow(y, z);
    JSON.stringify(rs.mag).should.eql(JSON.stringify([2, -2116968924]));

    done();

  });  

  it('#modPow()', function (done) {

    var n1 = BigInteger.fromString('1649a75c212838e75e09a31f95885cc4', 16);
    var n2 = n1.modPow(BigInteger.fromString("16"), BigInteger.fromString("abc", 16));
    n2.toString().should.eql('1752');

    var n1 = BigInteger.fromString('1649a75c212838e75e09a31f95885cc4', 16);
    n1 = n1.pow(16);
    
    n1.toString().should.eql('352077955572113749997766377800604444622460076305148734968729358265317637098322962367820050347875583315344462964959665575949583116858309826255943650974517847912636933043978007322657211481406063863803949575003585086657243583913635357700112214488990102841758130001472359622751803579436110307628748204242262026718059412403465177436225378758674098108230598260597569124215061062220122063183945992340833626410963722148168454106006573450244960544517302509105365797445155768980556404517176572624540378353645377100167311486845332613253103175716184748878557825330895970505263892076714272346348610201111018602496');
    
    var n2 = n1.modPow(BigInteger.fromString("16"), BigInteger.fromString("abcabcabc", 16));
    n2.toString().should.eql('10767932964');

    var msg = '7260580986005314663220885108603836683954870712159103203970460311568842873488890063378217596713766762096812844404018368152888087954541805361386268475501815657238701978875459554778023600881498995280721919038749556556936444959652605779460456195256240861409427021060436404204905533574646393427346248885612592';
    var m = '106018959548758374075240809816873307051744278500184673237124291327881973299725540626067594238570323588126236461136683027956239792390449112769067259228949389410083004114146729895400397755212626461400573141171389790509512527175274685865958330933256619829994461246888027851693134079594422706047966237154237741197';
    var e = '65537';  
    var r = '84898024966534415106814421836548142943313373946506735567680414589190378656046415733382186194260881641337812700153306660859748754776091705430087501985422699562392074268678742106663067749746024731314473749414990292905779847932907857969299790833040130501958613338151939523383367378187166847322806328958823316544';  
    // 84898024966534415106814421836548142943313373946506735567680414589190378656046415733382186194260881641337812700153306660859748754776091705430087501985422699562392074268678742106663067749746024731314473749414990292905779847932907857969299790833040130501958613338151939523383367378187166847322806328958823316544
    var test = BigInteger.fromString(msg, 10);
    var _m = BigInteger.fromString(m, 10);
    var exponent = BigInteger.fromString(e, 10);

    test.toString(10).should.eql(msg);
    _m.toString(10).should.eql(m);
    exponent.toString().should.eql(e);
    
    r.should.eql(test.modPow(exponent, _m).toString(10));
    
    done();

  }); 

  it('#modPow() sign', function () {
    var n1 = BigInteger.fromString('113152295272550710171739723619095214329745117885042033753421148541494121720214938727036045482838046861632325110444882236215570324203256598100730295474689468432818468656074055676622345090561294720299426433747742068524137550085534336820320037287156640657457812959134862161827719495462077619898201845372430911321');
    var n2 = BigInteger.fromString('164434386786047183744851351874243715054514741026919148656214506451813833322491605821849335066050757842272333379822303585854357894747191176321068814016690844221065767446740994875134121916717272874279646773438417933053935931082435226222744119111454715481125830145523558949392506376648591533444242634710475068413');
    var c = BigInteger.fromString('18525743256483878008548028962087348252231758673383985144576383226001432829748167079344973568189099470758154857637683751383074927720084625966845448351451640904727984797108181624336485878247955865537817487108640945312867170294237756840954681681185603753270495757547813347694412197695673302043170157125411442518826865692672093227922738174451573349059046715294778897736072918579671571093293291027572349447040860549744391891693321930284633556297921257538946274526930756317309772954738948034664239343016443105217195181961593226387707323010448623104136734388277447260033276663363491058705195573986554782763601973396723899103');
    var rv = c.modPow(n1, n2);
    rv.toString().should.eql('15419572702341233535967608698426326458165960026929271692116757428523860037773260048854455763688780286004344798188615808096635094222314113013755511499766647329435622000233871060952081321745573198842732048341159656801884792890490650316167961861509641340805073074259603134767397652533029071399587289883786148153');
  });

  it('#divide()', function (done) {
    var n = BigInteger.fromString('1000');
    var r = n.divide(BigInteger.fromString('10'));
    r.toString().should.eql('100');

    var n = BigInteger.fromString('10000000000000000000000000000000000000000000000000');
    var r = n.divide(BigInteger.fromString('1000000000000000000000'));
    r.toString().should.eql('10000000000000000000000000000');

    done();
  });

  it('#toString() 10000000000000000001 ', function (done) {
    var n = BigInteger.fromString('10000000000000000001');
    JSON.stringify(n.mag).should.eql(JSON.stringify([-1966660860, -1981284351]));
    n.toString().should.eql('10000000000000000001');
    done();
  });

  it('#fromString("-0").toString() === "-"', function (done) {
    var n = BigInteger.fromString('-0');
    n.toString().should.eql('0');

    var n = BigInteger.fromString('-0000001');
    n.toString().should.eql('-1');

    var n = BigInteger.fromString('-000000');
    n.toString().should.eql('0');    

    done();
  });

  it('#fromString("zzzzzzz", 36).toString(36) === "zzzzzzz"', function (done) {
    var n = BigInteger.fromString('zzzzzzz', 36);
    n.toString(36).should.eql('zzzzzzz');

    n = BigInteger.fromString('-zzzzzzzyyyyyy', 36);
    n.toString(36).should.eql('-zzzzzzzyyyyyy');

    n = BigInteger.fromString('hhhhhhhhhhhh', 18);
    n.toString(18).should.eql('hhhhhhhhhhhh');

    done();
  });

  it('#intValue()', function () {
    var n = BigInteger.fromString('100');
    n.intValue().should.eql(100);
    n = BigInteger.fromString('-1');
    n.intValue().should.eql(-1);
    n = BigInteger.fromString('0');
    n.intValue().should.eql(0);
  });

  it('#multiply', function () {
    // n: 25237294646469443400292998170518226281503171998686298027850656229978007124794828564029846281403553561914265399008644812095067653209727438339408979877639696001668194501939704773489663733193699692094594475256643152950227161506313055931170861576294174278675699477403824170361656608365753895692419367538603414446867835508035565831881180781217518073106320546727753595886259501438950144493719655076407335381075319410967865147514633527104174908079891573165113665413663623961696516981772181324971482240305555697361693828014988462732789973656329767737340136888272425463477318687515646772202886751201479368687334218097972074183
    // c: 986236757547332986472011617696226561292849812918563355472727826767720188564083584387121625107510786855734801053524719833194566624465665316622563244215340671405971599343902468620306327831715457360719532421388780770165778156818229863337344187575566725786793391480600129482653072861971002459947277805295727097226389568776499707662505334062639449916265137796823793276300221537201727072401742985542559596685092673521228140822200236743113743661549252453726123450722876929538747702356573783116197523966334991563351853851212597377279504828784694764617520842293857078413484690851028266792299229194715953363676050693998023
    // re: 1221104688905295195685313276300964054156855802362669699877112095863331130399019285852071756221874253389161082730291301429306315095839793565274582254040522842858688628755022860823330510927221828809254222262214376070263649290266967718779435654776454926150788258077725634663500833741281430239077978386432995112383759881732617525002600247251513463526329890717974316523027622749113535096846863631270837082350213774819907495426199608396902144278643356543688808596950716107732077408848439735344387348457241669933158678501052932841261619436055775167077667822030253712609808999362715832104493150872027666365876090847248014257
    // rv: 12628236838979476967674899256225872251937775751366662578245660806132750256525467986874375773558547085943241413972187083025774339997488943974200975954826707065086106110627498683558119573695214212977866717335424649376326177577552802701786806038277397317655096541046017812973253189535808381560684384435355070830925885867597587355901461402772085763563558964549712990010353305160555365371719540928173491910144337313194233207093608091851032087521197493129433279751950173987153748259882275720491440717561382207941267410784254385515161651050131657933440088882517816004092734643528819381872196978919107447534958932082821846853

    // 986236757547332986472011617696226561292849812918563355472727826767720188564083584387121625107510786855734801053524719833194566624465665316622563244215340671405971599343902468620306327831715457360719532421388780770165778156818229863337344187575566725786793391480600129482653072861971002459947277805295727097226389568776499707662505334062639449916265137796823793276300221537201727072401742985542559596685092673521228140822200236743113743661549252453726123450722876929538747702356573783116197523966334991563351853851212597377279504828784694764617520842293857078413484690851028266792299229194715953363676050693998023

    var n = BigInteger.fromString('25237294646469443400292998170518226281503171998686298027850656229978007124794828564029846281403553561914265399008644812095067653209727438339408979877639696001668194501939704773489663733193699692094594475256643152950227161506313055931170861576294174278675699477403824170361656608365753895692419367538603414446867835508035565831881180781217518073106320546727753595886259501438950144493719655076407335381075319410967865147514633527104174908079891573165113665413663623961696516981772181324971482240305555697361693828014988462732789973656329767737340136888272425463477318687515646772202886751201479368687334218097972074183');
    var c = BigInteger.fromString('986236757547332986472011617696226561292849812918563355472727826767720188564083584387121625107510786855734801053524719833194566624465665316622563244215340671405971599343902468620306327831715457360719532421388780770165778156818229863337344187575566725786793391480600129482653072861971002459947277805295727097226389568776499707662505334062639449916265137796823793276300221537201727072401742985542559596685092673521228140822200236743113743661549252453726123450722876929538747702356573783116197523966334991563351853851212597377279504828784694764617520842293857078413484690851028266792299229194715953363676050693998023');
    var re = BigInteger.fromString('4226448150089098270761131716809788456161688341952506880947268599230255987492773201115216270848493225857946702707038003739223110912250508422107178798031564468069827690109441359999316922458321899188516713453004794262298920335175955539297892715876397032101200586723429334810456048904329388795520415553809410753965210691895099151477938780563339809292002562246142521909362865859280104148577029192707914150522996199542335170210285331822138497230779294697654646558144824196948182153443281534574508376351538962232221875312297822232830518877499858395553608299645115930504698766904992537353656575515776064093286547934170378291');
    var rv = '23278884908409503667753831881899253374340856175222674966942136551472034672631845514302260409099636441126335836713549179327182606048590181531238066950747502511714281166496596145509950443890557255186388769929050770263145655253154810573344772177745851588158297482498078776310474859272918217901718824280933699356433854772297574428274524932176461776496211554599643966471710216429589427703784074339081094711822922179332689794742111043202055470397396003269857579568283829478135904849941219235513433983826401396536628843673749803508572076864717071217890464180995448023344335793580617465630635366774537115678021654767413815771';
    c.multiply(re).mod(n).toString(10).should.eql(rv);
  });

  it('#modInverse()', function () {
    var modulus = BigInteger.fromString('25237294646469443400292998170518226281503171998686298027850656229978007124794828564029846281403553561914265399008644812095067653209727438339408979877639696001668194501939704773489663733193699692094594475256643152950227161506313055931170861576294174278675699477403824170361656608365753895692419367538603414446867835508035565831881180781217518073106320546727753595886259501438950144493719655076407335381075319410967865147514633527104174908079891573165113665413663623961696516981772181324971482240305555697361693828014988462732789973656329767737340136888272425463477318687515646772202886751201479368687334218097972074183');
    var r = BigInteger.fromString('21986245566462622968839459496593852263928928609239809004566968979042312044934149595102180862079985724402751239773041284945373673589093155657706009214852939176580219664822126287310687524927884949410364564182084579341008456502191668469936681459135735008051087479957764061236609621446176386064874619941401873856003668999206962741991943547767615609080441880204587916369640579116739801030587180799695692509496884552498881781137169605730306686895831640607691706539790577636533711961483768553720441001529695602572319109573621133223896238389213082599740913890438794547947733796726226089793528695580133323891721652032013571803');
    var rv = '2810387632693811658244140430104522233470751811505187157717865312165491062302745364158557244846074494142479447933709876480632827833526627126701286112628127238548608819333979710112118526567478421897276273031717635340079620120092486453125109415292585355486903098059100994215998793778388926458933788065737546036645360657357346594975039809938253675531563725555938257233819215696894251102684191596667184134093099122094804736338607076512575579395157255678071029191198405260994412000020155101512810029772415237008383590131130180097577639960804016561503783010803818085563143346513289180330609466704463736837392388363782034476';
    var rs = r.modInverse(modulus);
    rs.toString().should.eql(rv);
  });

});

